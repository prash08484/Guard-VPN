// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  plan          Plan      @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  connections   VpnConnection[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model VpnServer {
  id        String   @id @default(cuid())
  name      String
  location  String
  ipAddress String
  port      Int      @default(51820)
  publicKey String
  isActive  Boolean  @default(true)
  load      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  connections VpnConnection[]
  
  @@map("vpn_servers")
}

model VpnConnection {
  id         String   @id @default(cuid())
  userId     String
  serverId   String
  clientKey  String
  status     ConnectionStatus @default(DISCONNECTED)
  connectedAt DateTime?
  disconnectedAt DateTime?
  bytesIn    BigInt   @default(0)
  bytesOut   BigInt   @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  server     VpnServer @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
  @@map("vpn_connections")
}

model Usage {
  id        String   @id @default(cuid())
  userId    String
  month     Int
  year      Int
  bytesUsed BigInt   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, month, year])
  @@map("usage")
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum ConnectionStatus {
  CONNECTED
  DISCONNECTED
  CONNECTING
  ERROR
}
